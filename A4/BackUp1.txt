'''
 *   @author Nguyen Hua Phung
 *   @version 1.0
 *   23/10/2015
 *   This file provides a simple version of code generator
 *
'''
import sys
from Utils import *
from StaticCheck import *
from StaticError import *
from Emitter import Emitter
from Frame import Frame
from abc import ABC, abstractmethod
from Visitor import BaseVisitor
from AST import *


sys.path.append('../utils')
sys.path.append('../checker')


class CodeGenerator(Utils):
    def __init__(self):
        self.libName = "io"

    def init(self):
        return [
            Symbol("getInt", MType([], IntType()), CName(self.libName)),
            Symbol("putInt", MType([IntType()], VoidType()), CName(self.libName)),
            Symbol("putIntLn", MType([IntType()], VoidType()), CName(self.libName)),
            Symbol("getFloat", MType([], FloatType()), CName(self.libName)),
            Symbol("putFloat", MType([FloatType()], VoidType()), CName(self.libName)),
            Symbol("putFloatLn", MType([FloatType()], VoidType()), CName(self.libName)),
            Symbol("putBool", MType([BoolType()], VoidType()), CName(self.libName)),
            Symbol("putBoolLn", MType([BoolType()], VoidType()), CName(self.libName)),
            Symbol("putString", MType([StringType()], VoidType()), CName(self.libName)),
            Symbol("putStringLn", MType([StringType()], VoidType()), CName(self.libName)),
            Symbol("putLn", MType([], VoidType()), CName(self.libName))
                ]

    def gen(self, ast, dir_):
        #ast: AST
        #dir_: String

        gl = self.init()
        gc = CodeGenVisitor(ast, gl, dir_)
        gc.visit(ast, None)

class Ctils:
    @staticmethod
    def isOpForNumToNum(operator):
        return str(operator) in ['+', '-', '*', '/', '%']

    @staticmethod
    def isOpForNumToBool(operator):
        return str(operator) in ['!=', '==', '>', '<', '>=', '<=']

    @staticmethod
    def isOpForNum(operator):
        return Ctils.isOpForNumToNum(operator) or Ctils.isOpForNumToBool(operator)

    @staticmethod
    def mergeNumberType(lType, rType):
        return FloatType() if FloatType in [type(x) for x in [lType, rType]] else IntType()

    @staticmethod
    def retrieveType(originType):
        if type(originType) is ArrayType: 
            return ArrayPointerType(originType.eleType)
        else:
            return originType

class ClassType(Type):
    def __init__(self, cname):
        #cname: String
        self.cname = cname

    def __str__(self):
        return "ClassType"

    def accept(self, v, param):
        return v.visitClassType(self, param)

class SubBody():
    def __init__(self, frame, sym, isGlobal = False, isExpr = False):
        #frame: Frame
        #sym: List[Symbol]

        self.frame = frame
        self.sym = sym
        self.isGlobal = isGlobal
        self.isExpr = isExpr


class Access():
    def __init__(self, frame, sym, isLeft, isFirst, isArrayType = False):
        #frame: Frame
        #sym: List[Symbol]
        #isLeft: Boolean
        #isFirst: Boolean

        self.frame = frame
        self.sym = sym
        self.isLeft = isLeft
        self.isFirst = isFirst
        self.isArrayType = isArrayType

class Val(ABC):
    pass

class Index(Val):
    def __init__(self, value):
        #value: Int

        self.value = value

class CName(Val):
    def __init__(self, value):
        #value: String

        self.value = value

class CodeGenVisitor(BaseVisitor, Utils):
    def __init__(self, astTree, env, dir_):
        #astTree: AST
        #env: List[Symbol]
        #dir_: File

        self.astTree = astTree
        self.env = env
        self.className = "MCClass"
        self.path = dir_
        self.emit = Emitter(self.path + "/" + self.className + ".j")
        # global variable
        self.listGlobalArray = [] 

    def visitProgram(self, ast, c):
        #ast: Program
        #c: Any

        self.emit.printout(self.emit.emitPROLOG(self.className, "java.lang.Object"))

        staticDecl = self.env
        for x in ast.decl:
            if type(x) is FuncDecl:
                paramType = [y.varType for y in x.param]
                staticDecl = [Symbol(x.name.name.lower(), MType(paramType, x.returnType), CName(self.className))] + staticDecl
            else:
                newSymbol = self.visit(x, SubBody(None, None, isGlobal=True))
                staticDecl = [newSymbol] + staticDecl

        e = SubBody(None, staticDecl)

        for x in ast.decl:
            if type(x) is FuncDecl:
                e = self.visit(x, e)

        # generate default constructor
        self.genMETHOD(FuncDecl(Id("<init>"), [], None, Block([])), c, Frame("<init>", VoidType))
        self.genMETHOD(FuncDecl(Id("<clinit>"), [], None, Block([])), c, Frame("<clinit>", VoidType))

        self.emit.emitEPILOG()

        return c

    def genMETHOD(self, consdecl: FuncDecl, o, frame: Frame):
        #consdecl: FuncDecl
        #o: Any
        #frame: Frame

        global_env = o

        funcName = consdecl.name.name

        isInit = consdecl.returnType is None and funcName == "<init>"

        isClassInit = consdecl.returnType is None and funcName == "<clinit>"

        isMain = consdecl.name.name == "main" and len(consdecl.param) == 0 and type(consdecl.returnType) is VoidType

        returnType = VoidType() if isInit or isClassInit else consdecl.returnType

        methodName = "<init>" if isInit else consdecl.name.name

        intype = [ArrayPointerType(StringType())] if isMain else [Ctils.retrieveType(x.varType) for x in consdecl.param]

        mtype = MType(intype, returnType)

        self.emit.printout(self.emit.emitMETHOD(methodName, mtype, not isInit, frame))

        frame.enterScope(True)

        # Generate code for parameter declarations
        if isInit:
            self.emit.printout(self.emit.emitVAR(frame.getNewIndex(), "this", ClassType(self.className), frame.getStartLabel(), frame.getEndLabel(), frame))

        if isMain:
            self.emit.printout(self.emit.emitVAR(frame.getNewIndex(), "args", ArrayPointerType(StringType()), frame.getStartLabel(), frame.getEndLabel(), frame))

        paramList = SubBody(frame, global_env)


        for x in consdecl.param:
            paramList = self.visit(x, paramList)
            if type(x.varType) is ArrayType:
                listParamArray.append(paramList.sym[0])

        self.emit.printout(self.emit.emitLABEL(frame.getStartLabel(), frame))

        # Generate code for statements
        if isInit:
            self.emit.printout(self.emit.emitREADVAR("this", ClassType(self.className), 0, frame))
            self.emit.printout(self.emit.emitINVOKESPECIAL(frame))
        
        self.visit(consdecl.body, SubBody(frame, paramList.sym))

        self.emit.printout(self.emit.emitLABEL(frame.getEndLabel(), frame))

        if type(returnType) is VoidType:
            self.emit.printout(self.emit.emitRETURN(VoidType(), frame))

        self.emit.printout(self.emit.emitENDMETHOD(frame))

        frame.exitScope()

    def visitFuncDecl(self, ast: FuncDecl, o):
        #ast: FuncDecl
        #o: Any

        subcontext = o
        frame = Frame(ast.name, ast.returnType)

        self.genMETHOD(ast, subcontext.sym, frame)

        return SubBody(None, [Symbol(ast.name, MType([], ast.returnType), CName(self.className))] + subcontext.sym)

    def visitVarDecl(self, ast: VarDecl, subbody: SubBody):
        subcontext = subbody
        frame = subbody.frame
        isGlobal = subbody.isGlobal
        varName = ast.variable
        varType = ast.varType

        if isGlobal:
            self.emit.printout(self.emit.emitATTRIBUTE(varName, Ctils.retrieveType(varType), False, ""))
            if type(ast.varType) is ArrayType:
                self.listGlobalArray.append(ast)
            return Symbol(varName, varType)

        idx = frame.getNewIndex()

        self.emit.printout(self.emit.emitVAR(idx, varName, Ctils.retrieveType(varType), frame.getStartLabel(), frame.getEndLabel(), frame))

        return SubBody(frame, [Symbol(varName, varType, Index(idx))] + subcontext.sym)

    def visitBlock(self, ast: Block, o: SubBody):
        subcontext = o
        frame = subcontext.frame
        symbols = subcontext.sym

        for x in ast.member:
            if type(x) is VarDecl:
                subcontext = self.visit(x, subcontext)
                symbols = subcontext.sym
            else: 
                e = SubBody(frame, symbols)
                if self.visit(x, e) == True:
                    return True
        return False

    def visitIf(self, ast: If, o: SubBody):
        subcontext = o
        frame = subcontext.frame
        newEnv = subcontext.sym
        expCode, expType = self.visit(ast.expr, Access(frame, newEnv, False, True))
        self.emit.printout(expCode)

        labelT = frame.getNewLabel() # if expr is true
        labelE = frame.getNewLabel() # label end

        # handle else stmt
        if ast.elseStmt:
            # labelT = frame.getNewLabel() # if expr is true
            # labelE = frame.getNewLabel() # label end

            self.emit.printout(self.emit.emitIFTRUE(labelT, frame))
            # False
            isReturn = True in [self.visit(ast.elseStmt, subcontext)]
            if not isReturn:
                self.emit.printout(self.emit.emitGOTO(labelE, frame))
            # True
            self.emit.printout(self.emit.emitLABEL(labelT, frame))
            isReturn = True in [self.visit(ast.thenStmt, subcontext)] and isReturn
            # End
            self.emit.printout(self.emit.emitLABEL(labelE, frame))
            return isReturn
        else:
            self.emit.printout(self.emit.emitIFTRUE(labelT, frame))
            self.emit.printout(self.emit.emitGOTO(labelE, frame))
            # True
            self.emit.printout(self.emit.emitLABEL(labelT, frame))
            isReturn = True in [self.visit(ast.thenStmt, subcontext)] and isReturn
            # End
            self.emit.printout(self.emit.emitLABEL(labelE, frame))
            return isReturn

    def visitFor(self, ast: For, o: SubBody):
        subcontext = o
        frame = subcontext.frame
        newEnv = subcontext.sym

        expr2, _ = self.visit(ast.expr2, Access(frame, newEnv, False, True))

        labelS = frame.getNewLabel()
        labelE = frame.getNewLabel()

        # init value
        self.visit(ast.expr1, SubBody(frame, newEnv))
        frame.enterLoop()

        # loop
        self.emit.printout(self.emit.emitLABEL(labelS, frame))

        # condition
        self.emit.printout(expr2)
        self.emit.printout(self.emit.emitIFFALSE(labelE, frame))

        # stmt
        isReturn = True in [self.visit(ast.loop, subcontext)]
        self.emit.printout(self.emit.emitLABEL(frame.getContinueLabel(), frame))

        # update index
        self.visit(ast.expr3, SubBody(frame, newEnv))

        if not isReturn:
            self.emit.printout(self.emit.emitGOTO(labelS, frame))
        self.emit.printout(self.emit.emitLABEL(labelE, frame))
        self.emit.printout(self.emit.emitLABEL(frame.getBreakLabel(), frame))
        frame.exitLoop()

    def visitDowhile(self, ast: Dowhile, o: SubBody):
        subcontext = o
        frame = subcontext.frame
        newEnv = subcontext.sym
        expr, exprType = self.visit(ast.exp, Access(frame, newEnv, False, True))

        labelS = frame.getNewLabel()
        labelE = frame.getNewLabel()

        [self.visit(x, o) for x in ast.sl]

        # enter loop
        frame.enterLoop()
        self.emit.printout(self.emit.emitLABEL(labelS, frame))
        self.emit.printout(expr)
        self.emit.printout(self.emit.emitIFFALSE(labelE, frame))
        isReturn = True in [self.visit(x, o) for x in ast.sl]
        self.emit.printout(self.emit.emitLABEL(frame.getContinueLabel(), frame))
        if not isReturn:
            self.emit.printout(self.emit.emitGOTO(labelS, frame))
        self.emit.printout(self.emit.emitLABEL(labelE, frame))
        self.emit.printout(self.emit.emitLABEL(frame.getBreakLabel(), frame))
        frame.exitLoop()

    def visitBreak(self, ast: Break, o: SubBody):
        subcontext = o
        frame = subcontext.frame
        return self.emit.printout(self.emit.emitGOTO(frame.getBreakLabel(), frame))

    def visitContinue(self, ast: Continue, o: SubBody):
        subcontext = o
        frame = subcontext.frame
        return self.emit.printout(self.emit.emitGOTO(frame.getContinueLabel(), frame))

    def visitReturn(self, ast: Return, o: SubBody):
        subcontext = o
        frame = subcontext.frame
        newEnv = subcontext.sym
        retType = frame.returnType

        if type(retType) is not VoidType:   
            expr, exprType = self.visit(ast.expr, Access(frame, newEnv, False, True))
            if type(retType) is FloatType and type(exprType) is IntType:
                expr += self.emit.emitI2F(frame)
            self.emit.printout(expr)
        self.emit.printout(self.emit.emitRETURN(retType, frame))
        return True

    # handle stmt & expr?
    def visitBinaryOp(self, ast: BinaryOp, o: SubBody):
        subcontext = o
        frame = subcontext.frame
        newEnv = subcontext.sym
        op = str(ast.op)

        if Ctils.isOpForNum(op):
            left, lType = self.visit(ast.left, subcontext)
            right, rType = self.visit(ast.right, subcontext)
            mtype = Ctils.mergeNumberType(lType, rType)
            if op == '/':
                mType = FloatType()
            if type(lType) is IntType and type(mType) != type(lType):
                left += self.emit.emitI2F(frame)
            if type(rType) is IntType and type(mType) != type(rType):
                right += self.emit.emitI2F(frame)
            if Ctils.isOpForNumToNum(op):
                if op in ['+', '-']:
                    return left + right + self.emit.emitADDOP(op, mType, frame), mtype
                if op in ['*', '/']:
                    return left + right + self.emit.emitMULOP(op, mtype, frame), mtype
                if op == '%':
                    return left + right + self.emit.emitMOD(frame), mtype
            else:
                return left + right + self.emit.emitREOP(op, mtype, frame), BoolType()
        elif op == '=':
            isArray, _ = self.visit(ast.left, Access(frame, newEnv, True, True, True))

            if isArray: 
                for i in range(0, 2):
                    frame.push()

            expr, expType = self.visit(ast.right, Access(frame, newEnv, False, True))
            lhs, lhsType = self.visit(ast.left, Access(frame, newEnv, True, True))

            if type(lhsType) is FloatType and type(expType) is IntType:
                expr += self.emit.emitI2F(frame)
            if not isArray:
                self.emit.printout(expr + lhs)
            else: 
                self.emit.printout(lhs[0] + expr + lhs[1])
                [frame.pop() for i in range(0, 2)]
            return expr + lhs, None

        else:
            left, lType = self.visit(ast.left, subcontext)
            right, rType = self.visit(ast.right, subcontext)
            mtype = BoolType()
            if op == '||':
                return left + right + self.emit.emitOROP(frame), mtype
            if op == '&&': 
                return left + right + self.emit.emitANDOP(frame), mtype

    # handle stmt?
    def visitUnaryOp(self, ast: UnaryOp, o: Access):
        subcontext = o
        frame = subcontext.frame
        op = ast.op
        body, bodyType = self.visit(ast.body, subcontext)
        if op == '-':
            return body + self.emit.emitNEGOP(bodyType, frame), bodyType
        if op == '!':
            return body + self.emit.emitNOT(bodyType, frame), bodyType

    def visitCallExpr(self, ast: CallExpr, o):
        #ast: CallExpr
        #o: Any

        subcontext = o
        frame = subcontext.frame
        newEnv = subcontext.sym
        sym = self.lookup(ast.method.name, newEnv, lambda x: x.name)
        cname = sym.value.value
        ctype = sym.mtype
        paramType = ctype.partype 
        paramsCode = ""
        idx = 0
        # handle stmt
        # if type(o) is SubBody:
            # subcontext = o
            # frame = subcontext.frame
            # newEnv = subcontext.sym
            # sym = self.lookup(ast.method.name, newEnv, lambda x: x.name)
            # cname = sym.value.value
            # ctype = sym.mtype
            # paramType = ctype.partype 
            # paramsCode = ""
            # idx = 0

        for x in ast.param: 
            pCode, pType = self.visit(x, Access(frame, newEnv, False, True))
            if type(paramType[idx]) is FloatType and type(pType) is IntType:
                pCode = pCode + self.emit.emitI2F(frame)
            if type(paramType[idx]) is ArrayType:
                pass
            paramsCode += pCode
            idx += 1
                
        code = paramsCode + self.emit.emitINVOKESTATIC(cname + "/" + sym.name, ctype, frame)
        # handle stmt
        if type(o) is SubBody:
            self.emit.printout(code)

        # handle expression
        else:
            return code, ctype.rettype 

    # handle stmt?
    def visitArrayCell(self, ast: ArrayCell, o: Access):
        subcontext = o
        frame = subcontext.frame
        symbols = subcontext.sym
        isLeft = subcontext.isLeft
        isFirst = subcontext.isFirst

        if isLeft and subcontext.isArrayType: 
            return True, None
        
        arr, arrType = self.visit(ast.arr, Access(frame, symbols, True, True))
        idx, idxType = self.visit(ast.idx, Access(frame, symbols, False, True))
        idx += self.emit.emitPUSHICONST(arrType.lower, frame) + self.emit.emitADDOP('-', IntType(), frame)
        if isLeft: 
            return [arr + idx, self.emit.emitASTORE(arrType.eleType, frame)], arrType.eleType
        return arr + idx + self.emit.emitALOAD(arrType.eleType, frame), arrType.eleType

    def visitId(self, ast: Id, o: Access):
        subcontext = o
        frame = subcontext.frame
        symbols = subcontext.sym
        isLeft = subcontext.isLeft
        isFirst = subcontext.isFirst

        if isLeft and subcontext.isArrayType:
            return False, None
        sym = self.lookup(ast.name, symbols, lambda x: x.name)

        if not isFirst and isLeft:
            frame.push()
        elif not isFirst and not isLeft:
            frame.pop()
        
        isArrayType = type(sym.mtype) is ArrayType
        emitType = Ctils.retrieveType(sym.mtype)
        if sym.value is None:
            if isLeft and not isArrayType:
                ret = self.emit.emitPUTSTATIC(self.className + '/' + sym.name, emitType, frame)
            else:
                ret = self.emit.emitGETSTATIC(self.className + '/' + sym.name, emitType, frame)
        else:
            if isLeft and not isArrayType:
                ret = self.emit.emitWRITEVAR(sym.name, emitType, sym.value.value, frame)
            else: 
                ret = self.emit.emitREADVAR(sym.name, emitType, sym.value.value, frame)
        return ret, sym.mtype

    def visitIntLiteral(self, ast: IntLiteral, o: Access):
        subcontext = o
        frame = subcontext.frame
        return self.emit.emitPUSHICONST(ast.value, frame), IntType()

    def visitFloatLiteral(self, ast: FloatLiteral, o: Access):
        subcontext = o
        frame = subcontext.frame
        return self.emit.emitPUSHFCONST(str(ast.value), frame), FloatType()

    def visitBooleanLiteral(self, ast: BooleanLiteral, o: Access):
        subcontext = o
        frame = subcontext.frame
        return self.emit.emitPUSHICONST(str(ast.value).lower(), frame), BoolType()
        
    def visitStringLiteral(self, ast: StringLiteral, o: Access):
        subcontext = o
        frame = subcontext.frame
        return self.emit.emitPUSHCONST(ast.value, StringType(), frame), StringType()